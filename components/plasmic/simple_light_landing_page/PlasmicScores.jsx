// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tKTnPCKDkyqVsBLoY29HS4
// Component: FR5Q4W7re2-kzK
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: ey_uE02a4G6XM/component
import Section from "../../Section"; // plasmic-import: O5PofbKZuSyR-q/component
import { Scores } from "../../Scores"; // plasmic-import: 7w1t5zkJjg/codeComponent
import Footer from "../../Footer"; // plasmic-import: ZPn3bgNH6g0zH/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_simple_light_landing_page.module.css"; // plasmic-import: tKTnPCKDkyqVsBLoY29HS4/projectcss
import sty from "./PlasmicScores.module.css"; // plasmic-import: FR5Q4W7re2-kzK/css

export const PlasmicScores__VariantProps = new Array();

export const PlasmicScores__ArgProps = new Array();

function PlasmicScores__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames("__wab_instance", sty.section)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={null}
            title={"Skor"}
          >
            <Scores
              data-plasmic-name={"scores"}
              data-plasmic-override={overrides.scores}
              className={classNames("__wab_instance", sty.scores)}
            />
          </Section>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "section", "scores", "footer"],
  header: ["header"],
  section: ["section", "scores"],
  scores: ["scores"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicScores__ArgProps,
      internalVariantPropNames: PlasmicScores__VariantProps
    });

    return PlasmicScores__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScores";
  } else {
    func.displayName = `PlasmicScores.${nodeName}`;
  }
  return func;
}

export const PlasmicScores = Object.assign(
  // Top-level PlasmicScores renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    section: makeNodeComponent("section"),
    scores: makeNodeComponent("scores"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicScores
    internalVariantProps: PlasmicScores__VariantProps,
    internalArgProps: PlasmicScores__ArgProps
  }
);

export default PlasmicScores;
/* prettier-ignore-end */
